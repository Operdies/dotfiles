#!/bin/bash

start_at=$(date +%s,%N)


source "$HOME/.config//dwm/startup.sh"

is_monitor() {
	xrandr | grep -q "^$1 connected"
}

is_laptop() {
	is_monitor "eDP1"
}

if is_monitor "DisplayPort-0"; then
	export DISPLAY_NAME="DisplayPort-0"
	export MONITOR_SCRIPT="$HOME/.screenlayout/amd.sh"
	export NETWORK_INTERFACE='enp34s0'
elif ! is_monitor "eDP1"; then
	error "Unrecognized monitor setup. Proceeding with laptop config."
fi

default-config() {
	bspc config split_ratio 0.60
	bspc config pointer_follows_focus true
	bspc config focus_follows_pointer true

	# prevent windows from stealing focus
	bspc config ignore_ewmh_focus true
	bspc config top_padding 0
	bspc config window_gap 8
	# Border
	bspc config border_width 1
	bspc config focused_border_color "#8c1a9b"
	bspc config normal_border_color "#073642"
	bspc config active_border_color "#073642"

	bspc config single_monocle true
	bspc config gapless_monocle true
	bspc config borderless_monocle true

	# Some wine applications behave weird with borders.
	# Floating windows move diagonally off the screen unless tiled.
	~/.config/bspwm/scripts/window-management/no_border_wine &
}

configure_locktime() {
	# Set blank time to 60 seconds
	xset +dpms
	SLEEP_MINTUES=2
	SLEEP_SECONDS=$((SLEEP_MINTUES * 60))
	xset s $SLEEP_SECONDS $SLEEP_SECONDS
	if has xautolock; then
		# Lock screen and suspend after 2 minutes
		# pgrep xautolock || xautolock -detectsleep -time 2 -locker '~/.config/bspwm/scripts/i3lock-fancy/i3lock-fancy.sh; sleep 5; systemctl suspend' &
		xautolock -detectsleep -time $((SLEEP_MINTUES + 1)) -locker "$HOME/.config/bspwm/scripts/i3lock-fancy/i3lock-minimalist.sh" &
	else
		error "xautolock is not installed"
	fi
}

laptop() {
	export MONITOR="eDP1"
	export NETWORK_INTERFACE='wlan0'
	export SECOND_MONITOR="HDMI1"
	~/.config/polybar/launch.sh kill
	if is_monitor "$SECOND_MONITOR"; then
		notify "$SECOND_MONITOR connected"
		~/.screenlayout/monitor.sh
		bspc monitor "eDP1" -d 1 2 3 4 5
		bspc monitor "$SECOND_MONITOR" -d 6 7 8 9 0
		bspc wm --reorder-monitors eDP1 "$SECOND_MONITOR"
		~/.config/polybar/launch.sh "$SECOND_MONITOR"
	else
		# cleanup
		bspc monitor "$SECOND_MONITOR" --remove
		xrandr --delmonitor vir1
		xrandr --delmonitor vir2
		bspc monitor vir1 --remove
		bspc monitor vir2 --remove
		~/.screenlayout/laptop.sh
		bspc monitor "eDP1" -d 1 2 3 4 5 6 7 8 9 0
		bspc wm --adopt-orphans
	fi
	~/.config/polybar/launch.sh eDP1
	default-config
	# configure_locktime
	bspc config window_gap 4
}

ultrawide() {
	export RIGHT="$DISPLAY_NAME"
	$MONITOR_SCRIPT
	# apply the default config
	default-config
	bspc monitor -d 1 2 3 4 5 6 7 8 9 0
	~/.config/polybar/launch.sh kill
	~/.config/polybar/launch.sh right
}

pip-mode() {
	export LEFT="$DISPLAY_NAME"
	# export LEFT="HDMI-0"
	export RIGHT="DP-4"

	~/.screenlayout/pip.sh
	# Set display from arandr saved script
	bspc monitor $RIGHT -d 1 2 3 4 5 6
	bspc monitor "$LEFT" -d 7 8 9 0
	# Explicitly set the monitor order to ensure DP-4 workspaces precede HDMI-0 workspaces
	bspc wm --reorder-monitors $RIGHT "$LEFT"

	default-config
}

# Configure the screen so the is a single 2560x1440 monitor in the middle, and two 1280x1440 monitors surrounding it
virtual-triple-pip-mode() {
	default-config
	bspc config single_monocle false
	bspc config gapless_monocle true

	$MONITOR_SCRIPT
	export LEFT="vir1"
	export RIGHT="vir2"
	export MIDDLE="vir3"

	# Save the current focus so we can restore it after setting up monitors
	FOCUSED="$(bspc query -n focused -N)"

	# Ensure the main monitor is focused
	bspc monitor -f "$DISPLAY_NAME"
	# Configure the virtual monitors in xrandr if they are not already
	if ! xrandr --listactivemonitors | grep -q "vir"; then
		# Set the monitors with xrandr so other programs (polybar) know about the virtual displays as well
		xrandr --setmonitor "$LEFT" 1280/297x1440/340+0+0 none #"$DISPLAY_NAME"
		xrandr --setmonitor "$RIGHT" 1280/298x1440/340+3840+0 none
		xrandr --setmonitor "$MIDDLE" 2560/595x1440/340+1280+0 none

		# Force a resolution change to ensure the changes are propagated (not sure if this is needed?)
		xrandr --fb 5121x1440
		xrandr --fb 5120x1440
	fi

	# If the virtual monitors are not already configured, create them
	if ! bspc query -M --names | grep -q vir; then
		bspc wm -a "$LEFT" "1280x1440+0+0"
		bspc wm -a "$MIDDLE" "2560x1440+1280+0"
		bspc wm -a "$RIGHT" "1280x1440+3840+0"
	fi

	# Restore focus
	bspc node -f "$FOCUSED"

	# We don't want any top padding for the QHD monitor
	# bspc config -m "$MIDDLE" top_padding 0

	bspc monitor $LEFT -d 1 2 3
	bspc monitor $MIDDLE -d 4 5 6
	bspc monitor $RIGHT -d 7 8 9 0

	# Explicitly reorder the monitors to ensure the workspace order is correct
	bspc wm --reorder-monitors $LEFT $MIDDLE $RIGHT

	# Open steam games workspace ^6
	GAMES=$(fd -d 1 "appmanifest" ~/.steam/steam/steamapps -x echo '{/.}' | sed 's/[^0-9]//g')
	for game in $GAMES; do
		bspc rule -a steam_app_"$game" desktop=^6 state=fullscreen
	done

	# apply the default config
	default-config

	# Bar
	~/.config/polybar/launch.sh kill
	~/.config/polybar/launch.sh left
	~/.config/polybar/launch.sh right
	~/.config/polybar/launch.sh middle
	bspc monitor "$DISPLAY_NAME" --remove
}

# rules
bspc rule -a looking-glass-client desktop=^6 state=fullscreen
bspc rule -a Pavucontrol:pavucontrol state=floating
bspc rule -a 'Virt-manager:*' state=floating
bspc rule -a 'Arandr:*' state=floating
bspc rule -a 'Blueman-manager:*' state=floating
bspc rule -a "Thunar:*" state=floating
bspc rule -a 'steam:*' desktop=^7
bspc rule -a 'steamwebhelper:*' desktop=^7
bspc rule -a 'discord:*' desktop=^7
bspc rule -a 'Spotify:*' desktop=^9
bspc rule -a 'leagueclientux.exe:*' state=floating desktop=^6
bspc rule -a 'league of legends.exe:*' state=fullscreen desktop=^6
bspc rule -a 'cs2:*' state=fullscreen desktop=^6
bspc rule -a teams-for-linux desktop=^10
bspc rule -a 'Zathura:*' state=tiled

if is_laptop; then
	laptop
else
	ultrawide
	# virtual-triple-pip-mode
	# Some wine applications behave weird with borders.
	# Floating windows move diagonally off the screen unless tiled.
	# ~/.config/bspwm/scripts/window-management/no_border_wine &
fi

# Cursor
xsetroot -cursor_name left_ptr &

if ! is_laptop; then
	# disable screen sleeping on inactivity
	xset -dpms &
	xset s off &
fi

end_at=$(date +%s,%N)
_s1=$(echo "$start_at" | cut -d',' -f1) # sec
_s2=$(echo "$start_at" | cut -d',' -f2) # nano sec
_e1=$(echo "$end_at" | cut -d',' -f1)
_e2=$(echo "$end_at" | cut -d',' -f2)
time_cost=$(bc <<<"scale=3; $_e1 - $_s1 + ($_e2 -$_s2)/1000000000")
notify "Reloaded bspwm in $time_cost seconds"

# vim: set et sw=2 sts=2 tw=78 ft=sh:
